# big credit to javidx9 or OneLonelyCoder
import time
import tkinter as tk
from dataclasses import dataclass
from math import *
from time import *
import copy

root = tk.Tk()
canvas = tk.Canvas(width=root.winfo_screenwidth(), height=root.winfo_screenheight(), background="black")

running = True

class vec3d:
    def __init__(self, x:float=0, y:float=0, z:float=0):
        self.x = x
        self.y = y
        self.z = z
    def __str__(self):
        return str((self.x,self.y,self.z))
    def __getitem__(self, index):
        if(index<3):
            match index:
                case 0:self.x
                case 1:self.y
                case 2:self.z




class triangle:
    def __init__(self, p1=vec3d, p2=vec3d(), p3=vec3d(), sym="gray75", col="White"):
        self.p = [p1, p2, p3]
        self.sym = sym
        self.col = col
    def __str__(self):
        return str((self.p,self.sym,self.col))

class mesh:
    def __init__(self):
        self.tris = []
    def __str__(self):
        return self.tris
    def LoadFromObjectFile(self, sFilename):
        with open(sFilename, 'r') as f:
            verts = []
            for line in f:
                if line[0] == 'v':
                    v = vec3d()
                    v.x, v.y, v.z = map(float, line[1:].split())
                    verts.append(v)
                elif line[0] == 'f':
                    f = list(map(int, line[1:].split()))
                    self.tris.append(triangle(verts[f[0] - 1], verts[f[1] - 1], verts[f[2] - 1], '', 0))
        return True

class mat4x4:
    def __init__(self):
        self.m = [[0 for _ in range(4)] for _ in range(4)]
    def __str__(self):
        return str(self.m)


def RgbToHex(rgb):
    return "#%02x%02x%02x" % rgb

triangles=mesh()
triangles.LoadFromObjectFile("axis.obj")
def LuminanceToColor(lum):
    black = (0, 0, 0)
    darkGray = (128, 128, 128)
    gray = (192, 192, 192)
    white = (255, 255, 255)
    Output: tuple

    pixelBw = floor(13 * lum)
    if pixelBw == 0:
        Output = black
    elif pixelBw == 1:
        Output = darkGray
    elif pixelBw == 2:
        Output = darkGray
    elif pixelBw == 3:
        Output = darkGray
    elif pixelBw == 4:
        Output = darkGray
    elif pixelBw == 5:
        Output = gray
    elif pixelBw == 6:
        Output = gray
    elif pixelBw == 7:
        Output = gray
    elif pixelBw == 8:
        Output = gray
    elif pixelBw == 9:
        Output = white
    elif pixelBw == 10:
        Output = white
    elif pixelBw == 11:
        Output = white
    elif pixelBw == 12:
        Output = white
    else:
        Output = black
    return RgbToHex(Output)


def LuminanceToColor2(lum):
    black = (0, 0, 0)
    darkGray = (128, 128, 128)
    gray = (192, 192, 192)
    white = (255, 255, 255)
    Output: tuple

    pixelBw = floor(13 * lum)
    if pixelBw == 0:
        Output = black
    elif pixelBw == 1:
        Output = black
    elif pixelBw == 2:
        Output = black
    elif pixelBw == 3:
        Output = black
    elif pixelBw == 4:
        Output = black
    elif pixelBw == 5:
        Output = darkGray
    elif pixelBw == 6:
        Output = darkGray
    elif pixelBw == 7:
        Output = darkGray
    elif pixelBw == 8:
        Output = darkGray
    elif pixelBw == 9:
        Output = gray
    elif pixelBw == 10:
        Output = gray
    elif pixelBw == 11:
        Output = gray
    elif pixelBw == 12:
        Output = gray
    else:
        Output = black
    return RgbToHex(Output)


def changeLuminance(rgb, percent):
    # return (rgb[0]*percent/100,rgb[1]*percent/100,rgb[2]*percent/100)
    return rgb

class TowDimensionsGeometry:
    def __init__(self, canvas, root):
        self.Canvas = canvas
        self.root = root
        self.root.geometry("700x350")
        self.polygonList = []
        self.width=self.Canvas.winfo_screenwidth()
        self.height=self.Canvas.winfo_screenheight()
    def DrawLine(self, point1, point2):
        """

        :param point1:
        :param point2:
        """
        self.Canvas.create_line(point1[0], point1[1], point2[0], point2[1])

    def DrawTriangle(self, point1, point2, point3, Color, stipple, outline, fill=True):


        if (fill):
            self.Canvas.create_polygon(point1.x, point1.y, point2.x, point2.y, point3.x, point3.y,
                                       stipple=stipple, fill=Color, outline=outline)
        else:
            self.DrawLine(point1, point2)
            self.DrawLine(point2, point3)
            self.DrawLine(point3, point1)
        self.polygonList.append([point1, point2, point3])

    def RenderPolygonsFromList(self):
        """

        """
        for Polygon in self.polygonList:
            self.Canvas.create_polygon(Polygon)

    def ClearAll(self):
        self.Canvas.delete("all")
#region

class ThreeDimensionalProjection:

    def __init__(self, canvas, root):
        self.matTrans = mat4x4

        self.root = root
        self.canvas = canvas

        self.prevTime = time()
        self.DeltaTime = 1
        self.TwoD = TowDimensionsGeometry(canvas, root)
        self.height = canvas.winfo_screenheight()
        self.width = canvas.winfo_screenwidth()

        self.fNear = 0.1
        self.Ffar = 1000
        self.fFov = 90
        self.fAspectRatio = self.height / self.width
        self.FovRad = 1 / tan(self.fFov * 0.5 / 180 * pi)
        self.MatProj = mat4x4()
        self.MatProj.m[0][0] = self.fAspectRatio * self.FovRad
        self.MatProj.m[1][1] = self.FovRad
        self.MatProj.m[2][2] = self.Ffar / (self.Ffar - self.fNear)
        self.MatProj.m[3][2] = (-self.Ffar * self.fNear) / (self.Ffar - self.fNear)
        self.MatProj.m[2][3] = 1
        self.matRotX = mat4x4()
        self.matRotZ = mat4x4()
        self.Vcamera =vec3d()
        self.fTheta = 0
        self.vLookDir = vec3d(0,0,1)
        self.MatView = mat4x4()
        self.fyaw = 0
        self.pDepthBuffer=[0 for i in range(0,self.height*self.width)]

    # def DotProduct(self,vector1,vector2):
    #
    def MatrixMakeProjection(self,Ffar,Fnear,fAspectRatio,fFovDegrees):

        FovRad = 1 / tan(fFovDegrees * 0.5 / 180 * pi)
        MatProj =mat4x4()
        MatProj.m[0][0] = fAspectRatio * FovRad
        MatProj.m[1][1] = FovRad
        MatProj.m[2][2] = Ffar / (Ffar - Fnear)
        MatProj.m[3][2] = (-Ffar * Fnear) / (Ffar -Fnear)
        MatProj.m[2][3] = 1
        return MatProj
    def MatrixMakeIdentity(self):
        matrix =mat4x4()
        matrix.m[0][0] = 1.0
        matrix.m[1][1] = 1.0
        matrix.m[2][2] = 1
        matrix.m[3][3] = 1.0

        return matrix

    def MultiplyMatrices(self, m1, m2):
        matrix =mat4x4()
        for c in range(0, 4):
            for r in range(0, 4):
                matrix.m[r][c] = m1.m[r][0] * m2.m[0][c] + m1.m[r][1] * m2.m[1][c] + m1.m[r][2] * m2.m[2][c] + m1.m[r][3] * m2.m[3][c]
        return matrix
    def MatrixMakeTranslation(self, x, y, z):
        matrix =mat4x4()
        matrix.m[0][0] = 1
        matrix.m[1][1] = 1
        matrix.m[2][2] = 1
        matrix.m[3][3] = 1
        matrix.m[3][0] = x
        matrix.m[3][1] = y
        matrix.m[3][2] = z
        return matrix

    def MultiplieMatrixVector(self, vect1, mat2):
        Output = vec3d()
        Output.x = vect1.x * mat2.m[0][0] + vect1.y * mat2.m[1][0] + vect1.z * mat2.m[2][0] + mat2.m[3][0]
        Output.y = vect1.x * mat2.m[0][1] + vect1.y * mat2.m[1][1] + vect1.z * mat2.m[2][1] + mat2.m[3][1]
        Output.z = vect1.x * mat2.m[0][2] + vect1.y * mat2.m[1][2] + vect1.z * mat2.m[2][2] + mat2.m[3][2]
        w = vect1.x * mat2.m[0][3] + vect1.y * mat2.m[1][3] + vect1.z * mat2.m[2][3] + mat2.m[3][3]
        if (w != 0):
            Output.x /= w
            Output.y /= w
            Output.z /= w
        return Output

    def VectorSub(self, vector1, vector2):
        return vec3d(vector1.x - vector2.x, vector1.y - vector2.y, vector1.z - vector2.z)

    def OnKeyPress(self, event):

        Forward = self.VectorMult(self.vLookDir, self.DeltaTime * 4)
        if event.char == "w":
            self.Vcamera.y = self.Vcamera.y- self.DeltaTime * 8
        if event.char == "s":
            self.Vcamera.y = self.Vcamera.y + self.DeltaTime * 8
        if event.char == "a":
            self.Vcamera.x = self.Vcamera.x - self.DeltaTime * 8
        if event.char == "d":
            self.Vcamera.x = self.Vcamera.x + self.DeltaTime * 8
        if event.keysym == "Up":
            self.Vcamera = self.VectorAdd(self.Vcamera, Forward)
        if event.keysym == "Down":
            self.Vcamera = self.VectorSub(self.Vcamera, Forward)

        if event.keysym == "Left":
            self.fyaw += self.DeltaTime * 4
        if event.keysym == "Right":
            self.fyaw -= self.DeltaTime * 4

    def MatrixPointAt(self, pos, target, up):
        new_forward = self.VectorSub(target, pos)
        new_forward = self.NormalizeVector(new_forward)
        a = self.VectorMult(new_forward, self.DotProduct(up, new_forward))
        newUp = self.VectorSub(up, a)
        newUp = self.NormalizeVector(newUp)
        newRight = self.CrossProduct(newUp, new_forward)
        matrix = mat4x4()
        matrix.m[0][0] = newRight.x
        matrix.m[1][0] = newUp.x
        matrix.m[2][0] = new_forward.x
        matrix.m[3][0] = pos.x
        matrix.m[0][1] = newRight.y
        matrix.m[1][1] = newUp.y
        matrix.m[2][1] = new_forward.y
        matrix.m[3][1] = pos.y
        matrix.m[0][2] = newRight.z
        matrix.m[1][2] = newUp.z
        matrix.m[2][2] = new_forward.z
        matrix.m[3][2] = pos.z
        matrix.m[0][3] = 0
        matrix.m[1][3] = 0
        matrix.m[2][3] = 0
        matrix.m[3][3] = 1
        return matrix

    def Matrix_QuickInverse(self, m):

        matrix =mat4x4()
        matrix.m[0][0] = m.m[0][0]
        matrix.m[0][1] = m.m[1][0]
        matrix.m[0][2] = m.m[2][0]
        matrix.m[0][3] = 0.0
        matrix.m[1][0] = m.m[0][1]
        matrix.m[1][1] = m.m[1][1]
        matrix.m[1][2] = m.m[2][1]
        matrix.m[1][3] = 0.0
        matrix.m[2][0] = m.m[0][2]
        matrix.m[2][1] = m.m[1][2]
        matrix.m[2][2] = m.m[2][2]
        matrix.m[2][3] = 0.0
        matrix.m[3][0] = -(m.m[3][0] * matrix.m[0][0] + m.m[3][1]  * matrix.m[1][0] + m.m[3][2] * matrix.m[2][0])
        matrix.m[3][1] = -(m.m[3][0] * matrix.m[0][1] + m.m[3][1] * matrix.m[1][1] + m.m[3][2] * matrix.m[2][1])
        matrix.m[3][2] = -(m.m[3][0] * matrix.m[0][2] + m.m[3][1] * matrix.m[1][2] + m.m[3][2] * matrix.m[2][2])
        matrix.m[3][3] = 1.0
        return matrix

    def DotProduct(self, vector1, vector2):
        return vector1.x * vector2.x + vector1.y * vector2.y + vector1.z * vector2.z

    def VectorMult(self, vector1, k):
        return vec3d(vector1.x * k, vector1.y * k, vector1.z * k)

    def CrossProduct(self, vector1, vector2):
        return vec3d(vector1.y * vector2.z - vector1.z * vector2.y, vector1.z * vector2.x - vector1.x * vector2.z,vector1.x* vector2.y - vector1.y * vector2.x)

    def VectorAdd(self, vector1, vector2):
        return vec3d(vector1.x + vector2.x, vector1.y + vector2.y, vector1.z + vector2.z)

    def NormalizeVector(self, Vector):
        l = sqrt(Vector.x * Vector.x + Vector.y * Vector.y + Vector.z * Vector.z)
        if (l == 0):
            return vec3d()
        else:
            return vec3d(Vector.x/ l, Vector.y / l, Vector.z / l)

    def VectorIntersectPlane(self, planeP, plane_N, lineStart, LineEnd):
        plane_n = self.NormalizeVector(plane_N)
        plane_d = -self.DotProduct(plane_n, planeP)

        ad = self.DotProduct(lineStart, plane_n)
        bd = self.DotProduct(LineEnd, plane_n)
        t = (-plane_d - ad) / (bd - ad)
        lineStartToEnd = self.VectorSub(vector1=LineEnd, vector2=lineStart)
        lineToIntersect = self.VectorMult(lineStartToEnd, t)
        return self.VectorAdd(lineStart, lineToIntersect)


    def TriangleClipAgainstPlane(self, plane_p, plane_n, in_tri, out_tris):

        plane_n=self.NormalizeVector(plane_n)
        dist = lambda p: plane_n.x * p.x + plane_n.y * p.y + plane_n.z * p.z - self.DotProduct(plane_n, plane_p)

        # plane_n = self.NormalizeVector(plane_n)



        out_tris[0].col="white"

        out_tris[1].col="white"



        insidePoints = [None for _ in range(3)]
        OutsidePoints = [None for _ in range(3)]
        nInsidePointCount = 0
        nOutsidePointCount = 0
        d0 = dist(p=in_tri.p[0])
        d1 = dist(p=in_tri.p[1])
        d2 = dist(p=in_tri.p[2])
        if (d0 >= 0):
            insidePoints[nInsidePointCount] = in_tri.p[0]
            nInsidePointCount += 1
        else:
            OutsidePoints[nOutsidePointCount] = in_tri.p[0]
            nOutsidePointCount += 1
        if (d1 >= 0):
            insidePoints[nInsidePointCount] = in_tri.p[1]
            nInsidePointCount += 1
        else:
            OutsidePoints[nOutsidePointCount] = in_tri.p[1]
            nOutsidePointCount += 1
        if (d2 >= 0):
            insidePoints[nInsidePointCount] = in_tri.p[2]
            nInsidePointCount += 1
        else:
            OutsidePoints[nOutsidePointCount] = in_tri.p[2]
            nOutsidePointCount += 1

        if (nInsidePointCount == 0):
            return 0
        if (nInsidePointCount == 3):
            out_tris[0] = in_tri

            return 1
        if (nInsidePointCount == 1 and nOutsidePointCount == 2):
            out_tris[0].p[0] = insidePoints[0]
            out_tris[0].p[1] = self.VectorIntersectPlane(plane_p, plane_n, insidePoints[0], OutsidePoints[0])
            out_tris[0].p[2] = self.VectorIntersectPlane(plane_p, plane_n, insidePoints[0], OutsidePoints[1])
            out_tris[0].col = "Blue"


            return 1
        if nInsidePointCount == 2 and nOutsidePointCount == 1:
            out_tris[0].p[0]=insidePoints[0]
            out_tris[0].p[1] =insidePoints[1]
            out_tris[0].p[2] = self.VectorIntersectPlane(plane_p, plane_n, insidePoints[0], OutsidePoints[0])
            out_tris[0].col= "Green"
            out_tris[1].p[0] = insidePoints[1]
            out_tris[1].p[1] = out_tris[0].p[2]
            out_tris[1].p[2]= self.VectorIntersectPlane(plane_p, plane_n, insidePoints[1], OutsidePoints[0])
            out_tris[1].col = "Red"


            return 2

    def ProjectTriangles(self):
        trisToProject = mesh()

        matTrans=self.MatrixMakeTranslation(0,0,5)
        matWorld=self.MatrixMakeIdentity()
        matWorld=self.MultiplyMatrices(self.matRotX,self.matRotZ)
        matWorld=self.MultiplyMatrices(matWorld,matTrans)
        for tri in triangles.tris:
            triTransformed=triangle()
            triTransformed.p[0]= self.MultiplieMatrixVector(mat2=matWorld, vect1=tri.p[0])
            triTransformed.p[1]=self.MultiplieMatrixVector(mat2=matWorld,vect1= tri.p[1])
            triTransformed.p[2] =self.MultiplieMatrixVector(mat2=matWorld,vect1= tri.p[2])
            triViewed = triTransformed
            print(triViewed)

            normal = vec3d()
            line1 = vec3d()
            line2 = vec3d()

            line1 = self.VectorSub(triTransformed.p[1], triTransformed.p[0])

            line2 = self.VectorSub(triTransformed.p[2], triTransformed.p[0])

            normal = self.CrossProduct(line1, line2)
            normal = self.NormalizeVector(normal)

            vCameraRay = self.VectorSub(triTransformed.p[0], self.Vcamera)


            if (self.DotProduct(normal,vCameraRay)<0):
                triViewed.p[0] = self.MultiplieMatrixVector(mat2=self.MatView, vect1=triTransformed.p[0])
                triViewed.p[1] = self.MultiplieMatrixVector(mat2=self.MatView, vect1=triTransformed.p[1])
                triViewed.p[2] = self.MultiplieMatrixVector(mat2=self.MatView, vect1=triTransformed.p[2])
                clipped = [triangle() for j in range(2)]
                n_clippedTriangles = 0
                n_clippedTriangles = self.TriangleClipAgainstPlane(vec3d(0, 0, 0.1), vec3d(0, 0, 1),triViewed, clipped)
                triProjected = triangle()
                lightDirection = vec3d(0,1,-1)
                lightDirection = self.NormalizeVector(lightDirection)
                dp = max(0.1, self.DotProduct(lightDirection, normal))
                for n in range(n_clippedTriangles):
                    triProjected.p[0]= self.MultiplieMatrixVector(clipped[n].p[0], self.MatProj)
                    triProjected.p[1]= self.MultiplieMatrixVector(clipped[n].p[1], self.MatProj)
                    triProjected.p[2]= self.MultiplieMatrixVector(clipped[n].p[2], self.MatProj)

                    # triProjected.append(clipped[n][9])

                    triProjected.p[0].x *= -1
                    triProjected.p[0].y *= -1
                    triProjected.p[1].x *= -1
                    triProjected.p[1].y *= -1
                    triProjected.p[2].x *= -1
                    triProjected.p[2].y *= -1
                    OffsetView = vec3d(1,1,0)
                    triProjected.p[0] = self.VectorAdd(triProjected.p[0], OffsetView)
                    triProjected.p[1] = self.VectorAdd(triProjected.p[1], OffsetView)
                    triProjected.p[2] = self.VectorAdd(triProjected.p[2], OffsetView)

                    triProjected.p[0].x *= 0.5 * self.width
                    triProjected.p[0].y *= 0.5 * self.height
                    triProjected.p[1].x *= 0.5 * self.width
                    triProjected.p[1].y *= 0.5 * self.height
                    triProjected.p[2].x *= 0.5 * self.width
                    triProjected.p[2].y *= 0.5 * self.height
                    Color = LuminanceToColor(dp)
                    Color2 = LuminanceToColor2(dp)
                    if (floor(13 * dp) % 4 == 0):
                        stipple = ''
                    elif (floor(13 * dp) % 4 == 1):
                        stipple = ''
                    elif (floor(13 * dp) % 4 == 2):
                        stipple = ''
                    elif (floor(13 * dp) % 4 == 3):
                        stipple = ''
                    trisToProject.tris.append(triProjected)


        trisToProject.tris = sorted(trisToProject.tris, reverse=True, key=lambda tri: (tri.p[0].z + tri.p[1].z + tri.p[2].z) / 3)
        # for tri in trisToProject:
        #
        #     self.TwoD.DrawTriangle(tri[0],tri[1],tri[2],outline="",fill=True,Color="white",stipple='')
        for tri in trisToProject.tris:
            clipped = [triangle() for j in range(2)]
            triangleList = []
            triangleList.append(tri)
            nNewTriangles = 1
            for p in range(0,4):

                nTrisToAdd = 0
                while nNewTriangles > 0:
                    test = triangleList.pop(0)

                    # arg1=test[3]
                    # arg2=test[4]
                    # arg3=test[5]
                    nNewTriangles -= 1
                    match p:
                        case 0:
                            nTrisToAdd = self.TriangleClipAgainstPlane(vec3d(0, 0, 0),vec3d(0, 1, 0), test,clipped)
                        case 1:
                            nTrisToAdd = self.TriangleClipAgainstPlane(vec3d(0, self.height, 0), vec3d(0, -1, 0), test, clipped)
                        case 2:
                            nTrisToAdd= self.TriangleClipAgainstPlane(vec3d(0, 0, 0),
                                                                                               vec3d(1, 0, 0), test,
                                                                                               clipped)

                        case 3:
                            print(p)
                            nTrisToAdd = self.TriangleClipAgainstPlane(vec3d(self.width , 0, 0),vec3d(-1, 0, 0), test,clipped)
                    for w in range(0, nTrisToAdd):
                        triangleList.append(clipped[w])
                nNewTriangles = len(triangleList)
            for t in triangleList:
              print(t.p[0])
              self.TwoD.DrawTriangle(t.p[0], t.p[1], t.p[2], fill=True, stipple='', Color=t.col, outline="black")

    def MakeRotationZ(self, fTheta):
        matRotZ = mat4x4()
        matRotZ.m[0][0] = cos(fTheta)
        matRotZ.m[0][1] = sin(fTheta)
        matRotZ.m[1][0] = -sin(fTheta)
        matRotZ.m[1][1] = cos(fTheta)
        matRotZ.m[2][2] = 1
        matRotZ.m[3][3] = 1
        return matRotZ

    def MakeRotationY(self, fTheta):
        matrix =mat4x4()
        matrix.m[0][0] = cos(fTheta)
        matrix.m[0][2] = sin(fTheta)
        matrix.m[2][0] = -sin(fTheta)
        matrix.m[1][1] = 1.0

        matrix.m[2][2] = cos(fTheta)
        matrix.m[3][3] = 1.0

        return matrix;

    def MakeRotationX(self, fTheta):
        matRotX =mat4x4()
        matRotX.m[0][0] = 1
        matRotX.m[1][1] = cos(fTheta * 0.5)
        matRotX.m[1][2] = sin(fTheta * 0.5)
        matRotX.m[2][1] = -sin(fTheta * 0.5)
        matRotX.m[2][2] = cos(fTheta * 0.5)
        matRotX.m[3][3] = 1
        return matRotX

    def Update(self):
        TwoD.ClearAll()
        self.DeltaTime = self.prevTime - time()
        self.prevTime = time()

        self.root.bind('<KeyPress>', self.OnKeyPress)

        # self.fTheta += 1 * 1 / 300
        self.matTrans = self.MatrixMakeTranslation(1, 1, 16)
        self.matWorld = [[0 for i in range(4)] for j in range(4)]
        self.matRotZ = self.MakeRotationZ(self.fTheta)
        self.matRotX = self.MakeRotationX(self.fTheta)
        self.matWorld = self.MultiplyMatrices(self.matRotX, self.matRotZ)
        self.matWorld = self.MultiplyMatrices(self.matWorld, self.matTrans)
        vTarget = vec3d(0,0,1)
        vUp = vec3d(0,1,0)
        matCameraRot = self.MakeRotationY(self.fyaw)
        self.vLookDir = self.MultiplieMatrixVector(vTarget, matCameraRot)
        vTarget = self.VectorAdd(self.Vcamera, self.vLookDir)
        self.height=self.canvas.winfo_screenheight()
        self.width=self.canvas.winfo_screenwidth()
        matCamera = self.MatrixPointAt(self.Vcamera, vTarget, vUp)
        self.MatView = self.Matrix_QuickInverse(matCamera)
        self.ProjectTriangles()
        self.root.after(1, self.Update)

    def Main(self):
        self.canvas.pack()

        self.root.after(1, self.Update())

        self.root.mainloop()


TwoD = TowDimensionsGeometry(canvas, root)
ThreeD = ThreeDimensionalProjection(canvas, root)
ThreeD.ProjectTriangles()
ThreeD.Main()
